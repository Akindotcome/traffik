version: '3.8'

services:
  # Redis service for testing
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main test service with Redis support
  test:
    build:
      context: .
      target: test
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
      - /app/.pytest_cache
    command: uv run pytest -v --tb=short

  # Test without Redis (for compatibility testing)
  test-no-redis:
    build:
      context: .
      target: test-no-redis
    volumes:
      - .:/app
      - /app/.pytest_cache
    command: uv run pytest -v -k "not redis and not Redis" --tb=short

  # Python 3.8 testing
  test-py38:
    build:
      context: .
      target: test-py38
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
      - /app/.pytest_cache
    command: uv run pytest -v --tb=short

  # Python 3.12 testing
  test-py312:
    build:
      context: .
      target: test-py312
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
      - /app/.pytest_cache
    command: uv run pytest -v --tb=short

  # Development environment
  dev:
    build:
      context: .
      target: development
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    stdin_open: true
    tty: true

  # Code quality checks
  quality:
    build:
      context: .
      target: base
    volumes:
      - .:/app
    command: |
      bash -c "
        echo 'Running code quality checks...' &&
        uv run ruff check src/ tests/ &&
        uv run ruff format --check src/ tests/ &&
        uv run bandit -r src/ &&
        echo 'All quality checks passed!'
      "

  # Coverage testing
  coverage:
    build:
      context: .
      target: test
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
      - /app/.pytest_cache
    command: |
      uv run pytest \
        --cov=src/traffik \
        --cov-branch \
        --cov-report=html \
        --cov-report=term-missing \
        --cov-fail-under=80 \
        -v

volumes:
  redis_data:
