name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Matrix testing across Python versions
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        include:
          # Test on different OS for latest Python
          - os: windows-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --extra test

      - name: Install Redis CLI (Ubuntu/macOS)
        if: runner.os != 'Windows'
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y redis-tools
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install redis
          fi

      - name: Wait for Redis (Ubuntu/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Waiting for Redis to be ready..."
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping 2>/dev/null; do sleep 1; done'
          echo "Redis is ready!"

      - name: Wait for Redis (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Waiting for Redis to be ready..."
          $timeout = 30
          $elapsed = 0
          do {
            try {
              $connection = New-Object System.Net.Sockets.TcpClient("localhost", 6379)
              $connection.Close()
              Write-Output "Redis is ready!"
              break
            } catch {
              Start-Sleep 1
              $elapsed++
            }
          } while ($elapsed -lt $timeout)
          if ($elapsed -ge $timeout) {
            Write-Error "Redis did not start within $timeout seconds"
            exit 1
          }
        shell: powershell

      - name: Run tests with coverage
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          uv run pytest \
            --cov=src/traffik \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --tb=short \
            -v

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Test installation from built package
  test-install:
    name: Test Package Installation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build package
        run: uv build

      - name: Install built package
        run: |
          cd dist
          uv pip install --system traffik-*.whl

      - name: Test installation
        run: |
          python -c "
          import traffik
          from traffik.backends.inmemory import InMemoryBackend
          from traffik.throttles import HTTPThrottle
          print('âœ… Package installed and imports work')
          "

  # Test with minimal dependencies
  test-minimal:
    name: Test Minimal Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install minimal dependencies
        run: |
          uv sync --extra test
          # Don't install redis extra

      - name: Run tests without Redis
        run: |
          uv run pytest tests/ -k "not redis and not Redis and not concurrent" -v --tb=short
